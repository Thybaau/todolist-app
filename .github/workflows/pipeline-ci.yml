# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: CI/CD

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  build_and_run_api:
    name: Build an Run Go API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version : '1.18'
      
      - name: Unit tests
        working-directory: ./server
        run: go test -v ./...

  deploy:
    name: Deploy locally
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start app
        run: |
          docker compose up -d
          start_result=$?
          if [start_result -ne 0]; then
            echo "Error: Failed to start containers"
            exit 1
          fi
    
      - name: Check API container
        run: |
          api_logs=$(docker logs todolist-srv)
          echo "$api_logs"
          if ! echo "$api_logs" | grep -q "Running server on port 9000"; then
            echo "Error : Problem while trying to start API container, check logs"
            exit 1
          fi
          curl -sSf http://localhost:8080/
          if [ $? -eq 0 ]; then
            echo "\n API is running correctly"
          else
            echo "\nCannot access API"
            exit 1
          fi

      - name: Check database container
        run: |
          db_logs=$(docker logs todolist-db)
          echo "$db_logs"
          if ! echo "$db_logs" | grep -q "database system is ready to accept connections"; then
            echo "Error : Problem while trying to start database container, check logs"
            exit 1
          fi
          docker compose ps -q database | grep -q .
          if [ $? -eq 0 ]; then
            echo "Database container is running"
          else
            echo "Database container is not running"
            exit 1
          fi

      - name: Check client container
        run: |
          front_logs=$(docker logs todolist-front)
          echo "$front_logs"
          if ! echo "$front_logs" | grep -q "Local:" || ! echo "$front_logs" | grep -q "Network:"; then
            echo "Error: todolist-front container did not start successfully"
            exit 1 # ArrÃªter le workflow avec un code de sortie 1
          fi
          

  test_job_3:
    name: Test Job 3
    runs-on: ubuntu-latest
    steps:
      - name: Run echo command
        run: echo "Running Test Job 3"
    # - name: Test
    #   run: go test -v ./...
  
          
